import { BaseGameScene } from "./BaseGameScene";
import { createLevelConfig, StartPositions } from "./LevelUtils";

/**
 * üéÆ Template para nuevos niveles - Copia este archivo para crear nuevos niveles
 *
 * ‚úÖ PASOS R√ÅPIDOS PARA CREAR UN NUEVO NIVEL:
 * 1. Copia este archivo y ren√≥mbralo (ej: Level1Scene.ts)
 * 2. Cambia el nombre de la clase (ej: Level1Scene)
 * 3. Elige una configuraci√≥n predefinida O personaliza la configuraci√≥n
 * 4. Agrega tu l√≥gica espec√≠fica en create() si es necesaria
 * 5. Agrega el nivel al PreloadScene
 */

export class LevelTemplateSceneNew extends BaseGameScene {
  constructor() {
    // üöÄ OPCI√ìN 1: CONFIGURACIONES PREDEFINIDAS (RECOMENDADO)
    // Descomenta una de las siguientes l√≠neas seg√∫n el tipo de nivel:

    // const config = LevelTypeConfigs.TESTING("NombreDeTuMapa");        // Para testing/debug
    // const config = LevelTypeConfigs.PLATFORMER("NombreDeTuMapa");     // Nivel de plataformas
    // const config = LevelTypeConfigs.VERTICAL("NombreDeTuMapa");       // Nivel vertical
    // const config = LevelTypeConfigs.EXPLORATION("NombreDeTuMapa");    // Nivel de exploraci√≥n

    // üéØ OPCI√ìN 2: CONFIGURACI√ìN PERSONALIZADA CON HELPERS
    const config = createLevelConfig("NombreDeTuMapa", {
      // Nombres de layers (opcional, usa valores por defecto si no se especifica)
      surfaceLayerName: "superficies",
      backgroundLayerName: "fondo",
      objectsLayerName: "objects",

      // Posici√≥n inicial (opcional, usa predefinidas)
      startPosition: StartPositions.DEFAULT, // o { x: 400, y: 900 }

      // Configuraci√≥n de c√°mara (opcional)
      cameraPreset: "NORMAL", // "NORMAL", "SMOOTH", "PLATFORMER", "VERTICAL_FIXED"
      cameraZoom: 1.0,

      // Tilesets personalizados (opcional)
      // customTilesets: [
      //   { name: "mi-tileset", imageKey: "mi-tileset-key" }
      // ]
    });

    super("LevelTemplateSceneNew", config);
  }

  /**
   * üó∫Ô∏è Implementaci√≥n espec√≠fica para crear el mapa
   * Este m√©todo es requerido por BaseGameScene
   */
  protected createMap(): void {
    // Crear tilemap
    this.tilemap = this.add.tilemap(this.config.tilemapKey);

    // Configurar tilesets usando el m√©todo helper de la clase base
    this.setupTilesets();

    // Crear layers est√°ndar usando el m√©todo helper de la clase base
    this.createStandardLayers();

    // üé™ AQU√ç PUEDES AGREGAR LAYERS ADICIONALES ESPEC√çFICOS DE TU NIVEL
    // Ejemplo:
    // this.decoracionLayer = this.tilemap.createLayer("decoracion", "mi-tileset")!;

    // Emitir evento para compatibilidad con editores
    this.events.emit("scene-awake");
  }

  /**
   * üéÆ M√©todo principal de creaci√≥n del nivel
   */
  create() {
    // ‚úÖ La clase base maneja TODA la l√≥gica est√°ndar:
    // - Creaci√≥n del mapa y layers
    // - Creaci√≥n del jugador
    // - Configuraci√≥n de f√≠sicas y colisiones
    // - Sistema de vida
    // - Configuraci√≥n de c√°mara
    // - Sistema de tiles especiales (agua, escaleras, spikes)
    super.create();

    // üéØ AQU√ç AGREGA L√ìGICA ESPEC√çFICA DE TU NIVEL
    // Ejemplos:
    // - NPCs √∫nicos
    // - Efectos especiales
    // - Elementos interactivos
    // - M√∫sica de fondo espec√≠fica
    // - Condiciones de victoria

    console.log(`üéÆ ${this.constructor.name} creado exitosamente!`);
  }

  /**
   * üîÑ Override del update si necesitas l√≥gica espec√≠fica del nivel
   * (Descomenta solo si es necesario)
   */
  // update() {
  //   // Ejecutar l√≥gica base primero
  //   super.update();
  //
  //   // Tu l√≥gica espec√≠fica aqu√≠
  //   // Ejemplo: verificar condiciones de victoria, elementos especiales, etc.
  // }

  /**
   * üéØ M√©todos helper espec√≠ficos del nivel
   */

  // Ejemplo: Sistema de checkpoints
  // private setupCheckpoints(): void {
  //   // Implementar checkpoints espec√≠ficos del nivel
  // }

  // Ejemplo: Elementos interactivos
  // private setupInteractiveElements(): void {
  //   // Configurar elementos √∫nicos del nivel
  // }

  // Ejemplo: Condiciones de victoria
  // private checkVictoryCondition(): boolean {
  //   // Verificar si el jugador complet√≥ el nivel
  //   return false;
  // }

  // Ejemplo: Efectos ambientales
  // private setupAmbientEffects(): void {
  //   // Configurar efectos de part√≠culas, sonidos ambientales, etc.
  // }
}

/*
üìã CHECKLIST SIMPLIFICADO PARA NUEVOS NIVELES:

‚úÖ CONFIGURACI√ìN B√ÅSICA (3 pasos):
- [ ] Cambiar nombre de clase (LevelTemplateSceneNew ‚Üí TuNivel)
- [ ] Actualizar tilemapKey en la configuraci√≥n
- [ ] Elegir configuraci√≥n predefinida o personalizar

‚úÖ ASSETS (2 pasos):
- [ ] Agregar tilemap (.json) a assets/
- [ ] Cargar assets en PreloadScene

‚úÖ DONE! üéâ
- ‚úÖ Sistema de colisiones autom√°tico
- ‚úÖ Tiles especiales (agua, escaleras, spikes) autom√°tico  
- ‚úÖ Sistema de vida autom√°tico
- ‚úÖ Todas las mec√°nicas del jugador autom√°ticas
- ‚úÖ Configuraci√≥n de c√°mara autom√°tica

üöÄ CONFIGURACIONES PREDEFINIDAS DISPONIBLES:
- LevelTypeConfigs.TESTING()     ‚Üí Para niveles de prueba
- LevelTypeConfigs.PLATFORMER()  ‚Üí Para plataformas horizontales  
- LevelTypeConfigs.VERTICAL()    ‚Üí Para niveles verticales
- LevelTypeConfigs.EXPLORATION() ‚Üí Para mapas grandes de exploraci√≥n

üí° HELPERS DISPONIBLES:
- StartPositions: DEFAULT, TOP_LEFT, CENTER, BOTTOM_CENTER
- CameraPresets: NORMAL, SMOOTH, PLATFORMER, VERTICAL_FIXED
- createLevelConfig(): Funci√≥n helper para configuraci√≥n personalizada
*/
